// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  fullname  String?
  username  String   @unique
  password  String
  bio       String?
  profile   String?  @default("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTteR5C7aU0L5LtNt8c026L5kGCk4H6dy56Cw&s")
  bgImage   String?  @default("https://c.files.bbci.co.uk/5DFC/production/_84606042_satan-promo.jpg")
  role      RoleEnum @default(MEMBER)
  following Follow[] @relation("Following")
  followers Follow[] @relation("Followers")

  threads Thread[]
  like    Like[]
  reply   Reply[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users") // for Rename
}

model Follow {
  id         Int  @id @default(autoincrement())
  followerId Int
  follower   User @relation("Followers", fields: [followerId], references: [id], onDelete: Cascade)

  followingId Int
  following   User @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  isFollowing Boolean @default(false)

  createdAt DateTime @default(now())

  @@unique([followerId, followingId])
  @@map("follow")
}

model Thread {
  id           Int     @id @default(autoincrement())
  content      String
  image        String?
  likesCount   Int     @default(0)
  repliesCount Int     @default(0)
  author       User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     Int

  like  Like[]
  reply Reply[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("threads")
}

model Reply {
  id           Int     @id @default(autoincrement())
  content      String?
  image        String?
  likesCount   Int?    @default(0)
  repliesCount Int?    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  threadId Int
  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  authorId Int
  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("reply")
}

model Like {
  id       Int @id @default(autoincrement())
  userId   Int
  threadId Int

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, threadId])
  @@map("like")
}

enum RoleEnum {
  ADMIN
  MEMBER
}
